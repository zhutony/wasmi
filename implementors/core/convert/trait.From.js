(function() {var implementors = {};
implementors["memory_units"] = [{"text":"impl From&lt;Words&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Pages&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Words&gt; for Bytes","synthetic":false,"types":[]},{"text":"impl From&lt;Pages&gt; for Bytes","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl From&lt;i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;BigUint&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u128&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for BigUint","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; From&lt;T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;(T, T)&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["parity_wasm"] = [{"text":"impl From&lt;VarUint32&gt; for usize","synthetic":false,"types":[]},{"text":"impl From&lt;VarUint32&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for VarUint32","synthetic":false,"types":[]},{"text":"impl From&lt;usize&gt; for VarUint32","synthetic":false,"types":[]},{"text":"impl From&lt;VarUint64&gt; for u64","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for VarUint64","synthetic":false,"types":[]},{"text":"impl From&lt;VarUint7&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for VarUint7","synthetic":false,"types":[]},{"text":"impl From&lt;VarInt7&gt; for i8","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for VarInt7","synthetic":false,"types":[]},{"text":"impl From&lt;Uint8&gt; for u8","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Uint8","synthetic":false,"types":[]},{"text":"impl From&lt;VarInt32&gt; for i32","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for VarInt32","synthetic":false,"types":[]},{"text":"impl From&lt;VarInt64&gt; for i64","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for VarInt64","synthetic":false,"types":[]},{"text":"impl From&lt;Uint32&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for Uint32","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for Uint64","synthetic":false,"types":[]},{"text":"impl From&lt;Uint64&gt; for u64","synthetic":false,"types":[]},{"text":"impl From&lt;VarUint1&gt; for bool","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for VarUint1","synthetic":false,"types":[]},{"text":"impl From&lt;(Vec&lt;(usize, Error)&gt;, Module)&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Unparsed&gt; for Vec&lt;u8&gt;","synthetic":false,"types":[]}];
implementors["wasmi"] = [{"text":"impl&lt;U&gt; From&lt;U&gt; for Error <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: HostError + Sized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;U&gt; From&lt;U&gt; for Trap <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: HostError + Sized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;Trap&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;TrapKind&gt; for Trap","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Trap&gt; for ResumableError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a [RuntimeValue]&gt; for RuntimeArgs&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for F32","synthetic":false,"types":[]},{"text":"impl From&lt;F32&gt; for f32","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for F64","synthetic":false,"types":[]},{"text":"impl From&lt;F64&gt; for f64","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for F32","synthetic":false,"types":[]},{"text":"impl From&lt;F32&gt; for u32","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for F64","synthetic":false,"types":[]},{"text":"impl From&lt;F64&gt; for u64","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;i64&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;u32&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;u64&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;F32&gt; for RuntimeValue","synthetic":false,"types":[]},{"text":"impl From&lt;F64&gt; for RuntimeValue","synthetic":false,"types":[]}];
implementors["wasmi_validation"] = [{"text":"impl From&lt;ValueType&gt; for StackValueType","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()